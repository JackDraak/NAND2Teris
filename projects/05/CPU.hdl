// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		Splitter16(in=instruction, a=jg,b=je,c=jl, d=lm,d=writeM,e=ld,f=la, g=no,h=f,i=ny,j=zy,k=nx,l=zx, m=ambit,p=acbit);
		Not(in=acbit, out=nac);
		Or(a=nac, b=la, out=lra);	// load register a (lra=1) when: nc (a instruction) or la (load a)
		PC(inc=true, load=jmp, in=arout, reset=reset, out[0..14]=pc);

		ARegister(out=arout, out[0..14]=addressM, in=amux, load=lra);
		Mux16(a=aluo, b=instruction, sel=nac, out=amux);		// mux from 'b' when a-instruction (otherwise 'a'?)
		
		// when am-bit is on... D&|M operation, off.... D&|A operation
		DRegister(out=drout, in=aluo, load=ld);
		Mux16(a=arout, b=inM, sel=ambit, out=amy); // do I need to swap my x & y? sending D to x, A|M to y....
		ALU(out=aluo, zr=zr, ng=ng, x=drout, y=amy, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no);
		Mux16(b=aluo, sel=lm, out=outM);		

		Not(in=ng, out=nng);
		Not(in=zr, out=nzr);
		And(a=nng, b=nzr, out=gand1);
		And(a=gand1, b=jg, out=gand);			// greater than zero
		And(a=zr, b=je, out=eand);				// equal to zero
		And(a=ng, b=jl, out=land);				// less than zero
		Or3Way(out=jmp, a=gand, b=eand, c=land);
}